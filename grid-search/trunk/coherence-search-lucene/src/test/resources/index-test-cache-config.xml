<?xml version="1.0"?>

    <!--
    Copyright 2010 Grid Dynamics Consulting Services, Inc.
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License. 
-->

<!DOCTYPE cache-config SYSTEM "cache-config.dtd">

<cache-config>
    <caching-scheme-mapping>

        <cache-mapping>
            <cache-name>objects</cache-name>
            <scheme-name>simple-distributed-scheme</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>local-cache</cache-name>
            <scheme-name>local-scheme</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>replicated-cache</cache-name>
            <scheme-name>simple-replicated-scheme</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>miss-cached</cache-name>
            <scheme-name>read-through-miss-distributed-scheme</scheme-name>
        </cache-mapping>

        <cache-mapping>
            <cache-name>miss-non-cached</cache-name>
            <scheme-name>read-through-no-miss-distributed-scheme</scheme-name>
        </cache-mapping>

    </caching-scheme-mapping>

    <caching-schemes>

        <local-scheme>
            <scheme-name>local-scheme</scheme-name>
        </local-scheme>

        <class-scheme>
            <scheme-name>local-hashmap-scheme</scheme-name>
            <class-name>java.util.HashMap</class-name>
        </class-scheme>

        <class-scheme>
            <scheme-name>local-juc-hashmap-scheme</scheme-name>
            <class-name>java.util.concurrent.ConcurrentHashMap</class-name>
        </class-scheme>

        <distributed-scheme>
            <scheme-name>simple-distributed-scheme</scheme-name>
            <backing-map-scheme>
                <local-scheme />
            </backing-map-scheme>
            <backup-count>0</backup-count>
            <autostart>true</autostart>
        </distributed-scheme>

        <replicated-scheme>
            <scheme-name>simple-replicated-scheme</scheme-name>
            <backing-map-scheme>
                <local-scheme />
            </backing-map-scheme>
        </replicated-scheme>

        <optimistic-scheme>
            <scheme-name>simple-optimistic-scheme</scheme-name>
            <backing-map-scheme>
                <local-scheme />
            </backing-map-scheme>
        </optimistic-scheme>

        <near-scheme>
            <scheme-name>simple-near-scheme</scheme-name>
            <front-scheme>
                <local-scheme>
                    <high-units>1000000</high-units>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <distributed-scheme>
                    <backing-map-scheme>
                        <local-scheme />
                    </backing-map-scheme>
                    <backup-count>0</backup-count>
                </distributed-scheme>
            </back-scheme>
        </near-scheme>

        <near-scheme>
            <scheme-name>near-distributed-scheme</scheme-name>
            <front-scheme>
                <local-scheme>
                    <high-units>1000000</high-units>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <distributed-scheme>
                    <backing-map-scheme>
                		<local-scheme />
            		</backing-map-scheme>
            		<backup-count>0</backup-count>
                </distributed-scheme>
            </back-scheme>
        </near-scheme>

        <near-scheme>
            <scheme-name>replicated-near-scheme</scheme-name>
            <front-scheme>
                <local-scheme>
                    <high-units>1000</high-units>
                </local-scheme>
            </front-scheme>
            <back-scheme>
                <replicated-scheme>
                    <backing-map-scheme>
                        <local-scheme />
                    </backing-map-scheme>
                </replicated-scheme>
            </back-scheme>
        </near-scheme>

        <replicated-scheme>
            <scheme-name>hash-map-replicated-scheme</scheme-name>
            <backing-map-scheme>
                <class-scheme>
                    <class-name>java.util.concurrent.ConcurrentHashMap</class-name>
                </class-scheme>
            </backing-map-scheme>
        </replicated-scheme>

        <distributed-scheme>
            <scheme-name>external-distributed-scheme</scheme-name>
            <backing-map-scheme>
                <external-scheme>
                    <nio-memory-manager />
                </external-scheme>
            </backing-map-scheme>
            <backup-count>0</backup-count>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>partitioned-false-external-distributed-scheme</scheme-name>
            <backing-map-scheme>
                <partitioned>false</partitioned>
                <external-scheme>
                <!-- 
                    <high-units>4000</high-units>
                    <unit-calculator>BINARY</unit-calculator>
                    <unit-factor>1048576</unit-factor>
                 -->
                    <nio-memory-manager/>
                </external-scheme>
            </backing-map-scheme>
            <backup-count>0</backup-count>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>partitioned-true-external-distributed-scheme</scheme-name>
            <backing-map-scheme>
                <partitioned>true</partitioned>
                <external-scheme>
                <!-- 
                    <high-units>4000</high-units>
                    <unit-calculator>BINARY</unit-calculator>
                    <unit-factor>1048576</unit-factor>
                 -->
                    <nio-memory-manager/>
                </external-scheme>
            </backing-map-scheme>
            <backup-count>0</backup-count>
        </distributed-scheme>
        
        <transactional-scheme>
        	<scheme-name>transactional-scheme</scheme-name>
        </transactional-scheme>
        
        <near-scheme>
        	<scheme-name>near-transactional-scheme</scheme-name>
            <front-scheme>
                <local-scheme/>
            </front-scheme>
            <back-scheme>
                <transactional-scheme/>
            </back-scheme>
        </near-scheme>

        <distributed-scheme>
            <scheme-name>simple-distributed-quorum-scheme</scheme-name>
            <backing-map-scheme>
                <local-scheme />
            </backing-map-scheme>
            <partitioned-quorum-policy-scheme>
				<write-quorum>3</write-quorum>
			</partitioned-quorum-policy-scheme>
            <backup-count>0</backup-count>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>read-through-distributed-scheme</scheme-name>
            <backing-map-scheme>
				<read-write-backing-map-scheme>
					<internal-cache-scheme><local-scheme/></internal-cache-scheme>
					<cachestore-scheme>
						<class-scheme><class-name>sample.SimpleCacheLoader</class-name></class-scheme>
						<operation-bundling>
							<bundle-config>
								<operation-name>load</operation-name>
								<prefered-size>20</prefered-size>
								<delay-millis>1</delay-millis>
								<thread-threshold>0</thread-threshold>
							</bundle-config>
						</operation-bundling>
					</cachestore-scheme>
				</read-write-backing-map-scheme>
            </backing-map-scheme>
            <backup-count>0</backup-count>
            <partition-count>2</partition-count>
            <!-- 
       		<operation-bundling>
       			<bundle-config>
       				<operation-name>get</operation-name>
       				<prefered-size>128</prefered-size>
       				<thread-threshold>1</thread-threshold>
       			</bundle-config>
       		</operation-bundling>
             -->
	<thread-count>2</thread-count>
</distributed-scheme>

        <distributed-scheme>
            <scheme-name>read-through-miss-distributed-scheme</scheme-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                	<internal-cache-scheme><local-scheme/></internal-cache-scheme>
                	<cachestore-scheme>
                		<class-scheme><class-name>sample.EmptyCacheLoader</class-name></class-scheme>
                	</cachestore-scheme>
                	<miss-cache-scheme><local-scheme/></miss-cache-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </distributed-scheme>

        <distributed-scheme>
            <scheme-name>read-through-no-miss-distributed-scheme</scheme-name>
            <backing-map-scheme>
                <read-write-backing-map-scheme>
                	<internal-cache-scheme><local-scheme/></internal-cache-scheme>
                	<cachestore-scheme>
                		<class-scheme><class-name>sample.EmptyCacheLoader</class-name></class-scheme>
                	</cachestore-scheme>
                </read-write-backing-map-scheme>
            </backing-map-scheme>
        </distributed-scheme>

        <near-scheme>
        	<scheme-name>read-through-transactional-scheme</scheme-name>
            <front-scheme>
                <local-scheme/>
            </front-scheme>
            <back-scheme>
                <read-write-backing-map-scheme>
                	<scheme-ref>read-through-transactional-backing-map</scheme-ref>
                </read-write-backing-map-scheme>
            </back-scheme>
        </near-scheme>

        <read-write-backing-map-scheme>
            <scheme-name>read-through-transactional-backing-map</scheme-name>
        	<internal-cache-scheme><transactional-scheme/></internal-cache-scheme>
        	<cachestore-scheme>
        		<class-scheme><class-name>sample.SimpleCacheLoader</class-name></class-scheme>
        		<!-- 
        		<operation-bundling>
        			<bundle-config>
        				<operation-name>load</operation-name>
        				<prefered-size>20</prefered-size>
        				<thread-threshold>0</thread-threshold>
        			</bundle-config>
        		</operation-bundling>
        		 -->
        	</cachestore-scheme>
        </read-write-backing-map-scheme>

    </caching-schemes>

</cache-config>